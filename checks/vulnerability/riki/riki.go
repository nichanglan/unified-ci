package riki

import (
	"bytes"
	"encoding/base64"
	"encoding/json"
	"errors"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/tengattack/unified-ci/checks/vulnerability/common"
	"github.com/tengattack/unified-ci/util"
)

// constants
const (
	postURL = "https://riki.bilibili.co/api/bvd/package/"
	getURL  = "https://riki.bilibili.co/api/bvd/vul/"
)

var client = http.Client{
	Timeout: 5 * time.Second,
}

// error definitions
var (
	ErrNotFound = errors.New("Error not found")
)

var mapLang = map[common.Language]string{
	common.Golang: "golang",
	common.Java:   "java",
	common.PHP:    "php",
	common.NodeJS: "nodejs",
}

// Scanner implements the vulnerability.Scanner interface
type Scanner struct {
	ProjectName string
}

// CheckPackages checks the vulnerability of the packages listed in pkgFilePath file, such as "go.sum"
func (s *Scanner) CheckPackages(lang common.Language, pkgFilePath string) (bool, error) {
	if !util.FileExists(pkgFilePath) {
		return false, ErrNotFound
	}
	fileContent, err := ioutil.ReadFile(pkgFilePath)
	if err != nil {
		return false, err
	}

	data := struct {
		AppName string `json:"app_name"`
		Lang    string `json:"lang"`
		Data    string `json:"data"`
	}{
		AppName: s.ProjectName + "-" + mapLang[lang],
		Lang:    mapLang[lang],
		Data:    strings.ReplaceAll(base64.StdEncoding.EncodeToString(fileContent), "\n", ""),
	}
	body, err := json.Marshal(data)
	if err != nil {
		return false, err
	}

	req, err := http.NewRequest(http.MethodPost, postURL, bytes.NewReader(body))
	if err != nil {
		return false, err
	}
	req.Header.Add("Content-Type", "application/json")
	resp, err := client.Do(req)
	if err != nil {
		return false, err
	}
	if resp.StatusCode != http.StatusOK {
		return false, nil
	}
	return true, nil
}

// Data type of the checking result
type Data struct {
	Link       string `json:"link"`
	VulTitle   string `json:"vul_title"`
	AppName    string `json:"app_name"`
	Name       string `json:"name"`
	VulProduct string `json:"vul_product"`
	UpdatedAt  string `json:"updated_at"`
	Version    string `json:"version"`
	VulRisk    string `json:"vul_risk"`
}

// MDTitle returns the title of the markdown table used to report data
func (Data) MDTitle() string {
	return "|level|name|version|description|\n|---|---|---|---|\n"
}

// MDTableRow formats Data d into a row of the markdown table
func (d Data) MDTableRow() string {
	return "|" + d.VulRisk + "|" + d.Name + "|" + d.Version + "|" + d.VulTitle + "|\n"
}

// Query queries the checking result of CheckPackages
func (s *Scanner) Query(lang common.Language) ([]Data, error) {
	url := getURL + "?app_name=" + url.QueryEscape(s.ProjectName+"-"+mapLang[lang])
	req, err := http.NewRequest(http.MethodGet, url, nil)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()
	data, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}
	var v struct {
		StatusCode int    `json:"status_code"`
		Data       []Data `json:"data"`
	}
	err = json.Unmarshal(data, &v)
	if err != nil {
		return nil, err
	}
	return v.Data, nil
}

// WaitForQuery waits for query
func (s *Scanner) WaitForQuery() {
	time.Sleep(20 * time.Second)
}
